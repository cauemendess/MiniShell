# Valgrind flags
#  valgrind --trace-children=yes --leak-check=full --show-leak-kinds=all --track-fds=yes --trace-children-skip=''*/bin/*,*/sbin/*'' --suppressions=suppressions.supp ./minishell

# Funções auxiliares para imprimir:

# void	ft_print_env(void) // Print Function (TO DELETE)
# {
# 	int		i;
# 	t_env	*stack;

# 	stack = get_core()->env_list;
# 	i = 0;
# 	while (stack)
# 	{
# 		printf("-----------------------------\n");
# 		printf("| Key  [%d]:%s.\n", i, stack->key);
# 		printf("| Value[%d]:%s.\n", i, stack->value);
# 		printf("| Next [%d]:%p\n", i, stack->next);
# 		printf("-----------------------------\n");
# 		i++;
# 		stack = stack->next;
# 	}
# }

# void	ft_translate_type(int type, int i) // Print Function (TO DELETE)
# {
# 	printf("| Type [%d]:", i);
# 	if (type == 1)
# 		printf("WORD \n");
# 	else if (type == 2)
# 		printf("REDIRECT \n");
# 	else if (type == 3)
# 		printf("APPEND \n");
# 	else if (type == 4)
# 		printf("PIPE \n");
# 	else if (type == 5)
# 		printf("HEREDOC \n");
# 	else if (type == 6)
# 		printf("SPACES \n");
# 	else if (type == 7)
# 		printf("VAR\n");
# 	else if (type == 8)
# 		printf("TRUNC \n");
# 	else if (type == 9)
# 		printf("END \n");
# }

# void	ft_print_stack(void) // Print Function (TO DELETE)
# {
# 	int		i;
# 	t_token	*stack;

# 	stack = get_core()->token;
# 	i = 0;
# 	while (stack)
# 	{
# 		printf("-----------------------------\n");
# 		printf("| Token[%d]:%s.\n", i, stack->str);
# 		ft_translate_type(stack->token, i);
# 		printf("| Next [%d]:%p\n", i, stack->next);
# 		printf("| Prev [%d]:%p\n", i, stack->prev);
# 		printf("-----------------------------\n");
# 		i++;
# 		stack = stack->next;
# 	}
# }

# void	print_cmd_table(void)
# {
# 	int		i = 0;
# 	t_cmd	*temp;

# 	temp = get_core()->cmd_table;
# 	while (i < get_core()->cmd_table_len)
# 	{
# 		printf("Printando o comando %d: \n", i);
# 		printf("Comando: %s\n", temp[i].cmd);
# 		print_matrix(temp[i].args);
# 		printf("Builtin? %d\n", temp[i].is_builtin);
# 		printf("---------------\n\n\n\n");
# 		i++;
# 	}
	
# }

# void print_matrix(char **matrix)
# {
# 	for(int i = 0; matrix[i] != NULL; i++)
# 		printf("%s\n", matrix[i]);
# 	printf("NULLLLLLLLL\n\n");
# }

# void print_env_list()
# {
# 	t_env *env_temp;
# 	env_temp = get_core()->env_list;
# 	while(env_temp != NULL)
# 	{
# 		printf("%s=%s\n", env_temp->key, env_temp->value);
# 		env_temp = env_temp->next;
# 	}
# }

